getwd()
getwd()
getwd()
getwd()
setwd("Users/mack/Stats")
setwd("Users/mack")
setwd("/Users/mack")
install.packages("brms")
library(moveVis)
install.packages("dplyr")
library(dplyr)
library(moveVis)
library(sf)
install.packages("sf")
library(sf)
install.packages('Rcpp')
install.packages("Rcpp")
library(Rcpp)
library(sf)
library(dplyr)
library(moveVis)
library(move)
library(raster)
library(ggplot2)
data("move_data")
View(move_data)
unique(timestamps(move_data))
timeLag(move_data, unit = "mins")
move_data <- align_move(move_data, res = 4, unit = "mins")
# get a list of all available map_services and map_types
get_maptypes()`
get_maptypes()
<- frames_spatial(move_data, path_colours = c("red", "green", "blue"),
map_service = "osm", map_type = "watercolor", alpha = 0.5)
frames <- frames_spatial(move_data, path_colours = c("red", "green", "blue"),
map_service = "osm", map_type = "watercolor", alpha = 0.5)
frames <- frames_spatial(move_data, path_colours = c("red", "green", "blue"),
map_service = "osm", map_type = "watercolor", alpha = 0.5)
length(frames) # number of frames
frames[[100]] # display one of the frames
animate_frames(frames, out_file = "example_1.gif")
frames <- frames_spatial(move_data, path_colours = c("red", "green", "blue"),
map_service = "osm", map_type = "streets", map_res = 0.8)
frames[[100]] # display one of the frames
move_data <- sp::spTransform(move_data, crs("+init=epsg:3857"))
frames <- frames_spatial(move_data, path_colours = c("red", "green", "blue"),
map_service = "osm", map_type = "streets", map_res = 0.8, equidistant = F)
frames[[100]] # display one of the frames
animate_frames(frames, out_file = "example_1b.gif", width = 700, height = 500, res = 80)
unique(timestamps(move_data))
timeLag(move_data, unit = "mins")
move_data <- align_move(move_data, res = 4, unit = "mins")
get_maptypes()
frames <- frames_spatial(move_data, path_colours = c("red", "green", "blue"),
map_service = "osm", map_type = "watercolor", alpha = 0.5)
library(dplyr)
library(moveVis)
library(move)
library(raster)
library(ggplot2)
data("move_data")
library(dplyr)
library(moveVis)
library(move)
library(raster)
library(ggplot2)
data("move_data")
library(dplyr)
library(moveVis)
library(move)
library(raster)
library(ggplot2)
data("move_data")
library(dplyr)
library(moveVis)
library(move)
library(raster)
library(ggplot2)
data("move_data")
unique(timestamps(move_data))
timeLag(move_data, unit = "mins")
move_data <- align_move(move_data, res = 4, unit = "mins")
frames <- frames_spatial(move_data, path_colours = c("red", "green", "blue"),
map_service = "osm", map_type = "watercolor", alpha = 0.5)
length(frames) # number of frames
frames[[100]] # display one of the frames
animate_frames(frames, out_file = "example_1.gif")
library(moveVis)
library(move)
# load the example data and convert them into a data.frame
data("move_data")
move_df <- methods::as(move_data, "data.frame")
View(move_df)
View(move_df)
vif(doc_global)
install.packages("rgl")
install.packages("ade4")
install.packages("plyr")
install.packages("dplyr")
install.packages("tidyr")
library(rgl)
library(ade4)
library(plyr)
library(dplyr)
library(tidyr)
t <- read.table("/Users/mack/Desktop/stoich_niche/t2.txt", header = TRUE);t=t[,-c(1)]
##############################################################################################################################
####Importing the final dataset
setwd("/Users/mack/Desktop/R/stoich_niche/t2.txt")
t <- read.table("/Users/mack/Desktop/R/stoich_niche/t2.txt", header = TRUE);t=t[,-c(1)]
t1=rbind(
t[t[,"TL"]=="detritivore",],
t[t[,"TL"]=="herbivore",],
t[t[,"TL"]=="invertebrate.predator",]
)
####Function to calculate standard errors
se=function(x) (sd(x)/sqrt(length(x)))
##############################################################################################################################
####The multidimensional stoichiometric niche: example with the four populations of Ammotrechidae sp.
####How to generate the total niche volume of invertebrates
#####Total volume of invertebrates
Tot.vol=392.4838
A=as.matrix(t1[,c("C","N","P")])
Tot.vol<-CHVind(A)
##############################################################################################################################
####Comparisons of observed niche volumes among populations of Ammotrechidae sp.
vol.Amo <- read.table("/Users/mack/Desktop/Paper.Script.Data/vol.amo.loc.txt", header = TRUE)
##############################################################################################################################
####Comparisons of observed niche volumes among populations of Ammotrechidae sp.
vol.Amo <- read.table("/Users/mack/Desktop/R/stoich_niche/vol.amo.loc.txt", header = TRUE)
####The subsequent lines allow calculating the pairwise comparisons of observed niche volumes among populations of Ammotrechidae sp.
####as well as turnover and nestedness values.
####Based on the paper by Villeger et al. 2013 (Decomposing functional beta diversity
####reveals that low functional beta diversity is driven by low functional turnover in European
####fish assemblages. Global Ecol. Biogeogr 22, 671-681.)
vol.Amo=data.frame(Site.Amo=rownames(vol.Amo),vol.Amo)
vol.over.Amo=vol.Amo%>%
mutate(voltot=vol1+vol2-volinter,
vol.inter.rel=volinter/voltot*100,
minim=pmin(vol1,vol2),
Turn=(2*minim-2*volinter)/(2*minim-volinter),
Nest=(abs(vol1-vol2)/(vol1+vol2-volinter))*(volinter/(2*minim-volinter)))
mean(vol.over.Amo$vol.inter.rel);se(vol.over.Amo$vol.inter.rel)###mean and SE values of isotope volume
mean(vol.over.Amo$Turn);se(vol.over.Amo$Turn)
mean(vol.over.Amo$Nest);se(vol.over.Amo$Nest)
#The following lines allow calculating the niche volumes of each population relative to the total niche volume
#occupied by all invertebrates from all populations (i.e., Tot.vol)
Amo=t1[t1[,"Genus.Species"]=="Amotrechidae.sp",]
comparison=Amo$Locality[drop=TRUE]
vol.Amo.Amo=data.frame(Site.Species=c(levels(comparison[drop=TRUE])),Volume=c(vol.Amo[1,2],vol.Amo[1:length(levels(comparison[drop=TRUE]))-1,3]))
vol.Amo.Amo=vol.Amo.Amo%>%
mutate(vol.sp.rel=(round((Volume/Tot.vol)*100,2)))
mean(vol.Amo.Amo$vol.sp.rel);se(vol.Amo.Amo$vol.sp.rel)
####How to generate the .txt file called: "vol.amo.loc.txt" (used in line 73) This file contains vol1, vol2, and volinter. Vol1= volume of the first population, vol2 = volume of the second population, and volinter = overlap between the two population niches.
Amo=t1[t1[,"Genus.Species"]=="Amotrechidae.sp",]
comparison=Amo$Locality[drop=T]
for(i in 1:length(levels(comparison[drop=T]))){
loop=ifelse(comparison==levels(comparison[drop=T])[i],i,comparison)
}
t3=cbind(Amo,loop)
vec_i=as.vector(combn(1:length(levels(comparison[drop=T])),2)[1,])
vec_j=as.vector(combn(1:length(levels(comparison[drop=T])),2)[2,])
comparison.names=paste(t(combn(levels(comparison[drop=T]),2))[,1],t(combn(levels(comparison[drop=T]),2))[,2],sep="_")
Ncomp<-matrix(NA,ncol=3,nrow=length(vec_i),dimnames=list(c(comparison.names),c("vol1","vol2","volinter")))
for(i in 1:length(vec_i)){
for(j in 1:3) {
Ncomp[i,j]<-round(CHVintersect(as.matrix(t3[t3$loop==vec_i[i],c("C","N","P")]),
as.matrix(t3[t3$loop==vec_j[i],c("C","N","P")]))$vol[j],2)
}
}
write.table(Ncomp,"vol.amo.loc.txt")
##############################################################################################################################
####Niche shape: PCA for populations of Ammotrechidae among localities
Amo=t1[t1[,"Genus.Species"]=="Amotrechidae.sp",]
#Guanacos
amo.gua.pca=dudi.pca(Amo[Amo[,"Locality"]=="Guanacos",c(1:3)],scannf=FALSE,nf=3,scale=TRUE,center=TRUE)
s.corcircle(amo.gua.pca$co);amo.gua.pca$co;amo.gua.pca$eig/sum(amo.gua.pca$eig);sum(amo.gua.pca$eig[c(1,2)])/sum(amo.gua.pca$eig)
#Huantajaya
amo.hua.pca=dudi.pca(Amo[Amo[,"Locality"]=="Huantajaya",c(1:3)],scannf=FALSE,nf=3,scale=TRUE,center=TRUE)
s.corcircle(amo.hua.pca$co);amo.hua.pca$co;amo.hua.pca$eig/sum(amo.hua.pca$eig);sum(amo.hua.pca$eig[c(1,2)])/sum(amo.hua.pca$eig)
#Isla
amo.isl.pca=dudi.pca(Amo[Amo[,"Locality"]=="Isla",c(1:3)],scannf=FALSE,nf=3,scale=TRUE,center=TRUE)
s.corcircle(amo.isl.pca$co);amo.isl.pca$co;amo.isl.pca$eig/sum(amo.isl.pca$eig);sum(amo.isl.pca$eig[c(1,2)])/sum(amo.isl.pca$eig)
#Pajonal
amo.paj.pca=dudi.pca(Amo[Amo[,"Locality"]=="Pajonal",c(1:3)],scannf=FALSE,nf=3,scale=TRUE,center=TRUE)
s.corcircle(amo.paj.pca$co);amo.paj.pca$co;amo.paj.pca$eig/sum(amo.paj.pca$eig);sum(amo.paj.pca$eig[c(1,2)])/sum(amo.paj.pca$eig)
####Plot3D of the niche volumes of Ammotrechidae sp. across localities
L=as.matrix(Amo[Amo[,"Locality"]=="Guanacos",c("C","N","P")])
####Plot3D of the niche volumes of Ammotrechidae sp. across localities
L=as.matrix(Amo[Amo[,"Locality"]=="Guanacos",c("C","N","P")])
amo.gua<-CHVind(L)
M=as.matrix(Amo[Amo[,"Locality"]=="Huantajaya",c("C","N","P")])
amo.hua<-CHVind(M)
N=as.matrix(Amo[Amo[,"Locality"]=="Isla",c("C","N","P")])
amo.isl<-CHVind(N)
O=as.matrix(Amo[Amo[,"Locality"]=="Pajonal",c("C","N","P")])
amo.paj<-CHVind(O)
####Get the spheres plot
par3d(windowRect = c(20, 30, 700, 700), cex = 1.5)####last two values can be increased or decreased to control size of screen plot
couleur=ifelse(Amo$Locality=="Guanacos","blue",ifelse(Amo$Locality=="Huantajaya","darkorange2",ifelse(Amo$Locality=="Isla","green",ifelse(Amo$Locality=="Pajonal","black",Amo$Locality))))
plot3d(Amo$C,Amo$N,Amo$P,col=couleur,xlab="C",ylab="N",zlab="P",size=4,type='p',box=TRUE)
legend3d("topright", legend = c("Guanacos","Huantajaya","Isla","Pajonal"), pch = 16, col = c("blue","darkorange2","green","black"), cex=2, inset=c(0.02))
spheres3d(apply(amo.gua$vert_set1,2,mean), radius = ((amo.gua$vol[1]*3)/(4*pi))^(1/3),color="blue")
spheres3d(apply(amo.hua$vert_set1,2,mean), radius = ((amo.hua$vol[1]*3)/(4*pi))^(1/3),color="darkorange2")
spheres3d(apply(amo.isl$vert_set1,2,mean), radius = ((amo.isl$vol[1]*3)/(4*pi))^(1/3),color="green")
spheres3d(apply(amo.paj$vert_set1,2,mean), radius = ((amo.paj$vol[1]*3)/(4*pi))^(1/3),color="black")
####You can use your mouse to manipulate the plot. The default is that if you click and hold with the
####left mouse button, you can rotate the plot by dragging it. The right mouse button is used to resize
####it, and the middle button changes the perspective in the point of view.
snapshot3d("image2.png",fmt="png") #To save the plot3D
library(tidyverse)
library(hypervolume)
install.packages("Rcpp")
library(tidyverse)
library(hypervolume)
sudo xcode-select --install
xcode-select --install
sudo xcode-select --install
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("dplyr")
install.packages("hypervolume")
library(tidyverse)
library(hypervolume)
#convert to csv----
# updated on 12/8/21****
# function to convert MixSIAR output to a table to generate random data
# to use for hypervolumes
# file = name of .txt of summary statistics of MixSIAR
# type = identifying information of the data set
# ind = if true will output with columns as source values
# nest = if nested mixing model, T will return the sources of nested
mixTable = function(file,type,ind = F,nest = F){
require(tidyverse)
cn = c('ID', 'Mean', 'SD', '2.5%', '5%', '25%', '50%', '75%', '95%', '97.5%')
x = read_fwf(file, skip = 8)
names(x) = cn
x$source = NA
x$name = NA
x$code = NA
if (nest == F){
for (i in 1:nrow(x)){
temp = strsplit(x$ID, split = '.', fixed = T)
x$source[i] = temp[[i]][3]
x$name[i] = temp[[i]][2]
x$type = type
x$ymax = x$`75%` + 1.5*(x$`75%` - x$`25%`)
x$ymin = x$`25%` - 1.5*(x$`75%` - x$`25%`)
df = data.frame(x$name, x$type, x$source, x$Mean, x$SD, x$`2.5%`, x$`97.5%`,
x$`50%`, x$`25%`, x$`75%`, x$ymax, x$ymin)
colnames(df) = c('name', 'type', 'source', 'mean', 'sd', 'lowend', 'highend',
'mid', 'low', 'up', 'ymax', 'ymin')
}
}else{
for (i in 1:nrow(x)){
temp = strsplit(x$ID, split = '.', fixed = T)
x$source[i] = temp[[i]][4]
x$code[i] = temp[[i]][3]
x$name[i] = temp[[i]][2]
x$type = type
x$ymax = x$`75%` + 1.5*(x$`75%` - x$`25%`)
x$ymin = x$`25%` - 1.5*(x$`75%` - x$`25%`)
df = tibble(x$name, x$type, x$source, x$code, x$Mean, x$SD, x$`2.5%`, x$`97.5%`,
x$`50%`, x$`25%`, x$`75%`, x$ymax, x$ymin)
colnames(df) = c('name', 'type', 'source', 'code', 'mean', 'sd', 'lowend', 'highend',
'mid', 'low', 'up', 'ymax', 'ymin')
}
}
for (i in 1:nrow(df)){
if (df$ymax[i] > df$highend[i]){
df$ymax[i] = df$highend[i]
}
if (df$ymin[i] < df$lowend[i]){
df$ymin[i] = df$lowend[i]
}
}
df = df %>% drop_na %>%
filter(name != 'global')
if (ind == T){
if (nest == T){
df = df %>% select(name, type, code, source, mean) %>%
pivot_wider(names_from = 'source', values_from = 'mean')
}else{
df = df %>% select(name, type, source, mean)%>%
pivot_wider(names_from = 'source', values_from = 'mean')
}
}
return(df)
}
# Oyster reference and restored----
# mixing model results
ref = mixTable(file = 'C:/Users/wrjam/Dropbox/WorkDocs/R/Github/ExCode/Hypervolumes/data/OysterRes_ss.txt',
type = 'Reference',ind = F, nest = F)
res = mixTable(file = 'C:/Users/wrjam/Dropbox/WorkDocs/R/Github/ExCode/Hypervolumes/data/OysterRef_ss.txt',
type = 'Restored', ind = F, nest = F)
# generate hypervolume
ref_hv = hypervolume_gaussian(ref_df, name = 'Reference',
#samples.per.point = ceiling((10^(3 + sqrt(ncol(ref_df))))/nrow(ref_df)),
samples.per.point = 5000,
kde.bandwidth = estimate_bandwidth(ref_df),
sd.count = 3,
quantile.requested = 0.95,
quantile.requested.type = "probability",
chunk.size = 1000,
verbose = F)
setwd("~/Desktop/RESEARCH/SPATIAL SYNCHRONY")
setwd("~/Desktop/RESEARCH/SPATIAL SYNCHRONY")
dat <- read.csv("isotope_all_june2022.csv")
View(dat)
library(tidyverse)
library(lubridate)
library(viridis)
library(plotly)
library(ggmap)
library(xlsx)
library(dplyr)
library(data.table)
library(hrbrthemes)
dat <- dat[c(1,5,7:22)
dat
dat <- dat[c(7:22), c(1,5)]
dat
dat
View(dat)
dat <- read.csv("isotope_all_june2022.csv")
View(dat)
dat <- dat[c(1,5:22]
dat <- dat[c(1,5:22)]
dat
View(dat)
View(dat)
dat <- dat %>%
names(dat)[1] <- 'species' %>%
filter(species = 'Snook')
dat <- dat %>%
names(dat)[1] <- 'species' %>%
subset(species = 'Snook')
dat <- dat %>%
names(dat)[1] <- 'species'
dat <- dat %>%
names(dat)[1] <- 'species'
dat <- names(dat)[1] <- 'species'
dat <- read.csv("isotope_all_june2022.csv")
View(dat)
dat <- dat[c(1,5:22)]
names(dat)[1] <- 'species'
View(dat)
unique(dat$species)
uniq_species <- unique(dat$species)
View(uniq_species)
dat <- dat %>%
filter(species = "Snook", "Common Snook", "Centropomus undecimalis")
dat <- dat %>%
filter(species == "Snook", "Common Snook", "Centropomus undecimalis")
dat <- dat %>%
dat %>%
dat %>% filter(species %in% c("Snook", "Common Snook", "Centropomus undecimalis")
View(dat)
dat %>%
filter(species %in% c("Snook", "Common Snook", "Centropomus undecimalis"))
View(dat)
dat <- dat %>%
filter(species %in% c("Snook", "Common Snook", "Centropomus undecimalis"))
View(dat)
dat <- dat %>%
filter(species %in% c("Snook", "Common Snook", "Centropomus undecimalis")) %>%
levels(dat$species) <- c("Snook", "Snook", "Snook")
levels(dat$species) <- c("Snook", "Snook", "Snook")
dat <- read.csv("shark river_isotope_snook_withS_june2022.csv")
View(dat)
datSNOOK = dat %>%
datSNOOK = dat %>%
group_by(Month, Year) %>%
summarize(Samples = count(sample_ID)
datSNOOK
datSNOOK = dat %>%
setwd("~/Desktop/RESEARCH/SPATIAL SYNCHRONY")
